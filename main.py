import telebot
from telebot import types
import re
from datetime import datetime, timedelta
import telebot.apihelper

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot('API-–¢–û–ö–ï–ù')

# –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –∑ —Ü—ñ–Ω–∞–º–∏ —Ç–∞ —à–ª—è—Ö–∞–º–∏ –¥–æ —Ñ–æ—Ç–æ
menu = {
    '–°—Ç—Ä–∞–≤–∏': {
        '–í–∞—Ä–µ–Ω–∏–∫–∏': {'price': 50, 'photo': 'photos/varenyk.jpg'},
        '–î–µ—Ä—É–Ω–∏': {'price': 70, 'photo': 'photos/deruny.jpg'},
        '–ë–æ—Ä—â': {'price': 60, 'photo': 'photos/borshch.jpg'},
        '–°–æ–ª—è–Ω–∫–∞': {'price': 65, 'photo': 'photos/solyanka.jpg'},
        '–•–æ–ª–æ–¥–Ω–∏–∫': {'price': 55, 'photo': 'photos/holodnik.jpg'},
        '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞': {'price': 120, 'photo': 'photos/pizza_margarita.jpg'},
        '–ü—ñ—Ü–∞ 4 –°–∏—Ä–∏': {'price': 150, 'photo': 'photos/pizza_4cheese.jpg'},
        '–ü—ñ—Ü–∞ –ü–∞–ø–µ—Ä–æ–Ω—ñ': {'price': 140, 'photo': 'photos/pizza_pepperoni.jpg'},
        '–ö–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ': {'price': 45, 'photo': 'photos/french_fries.jpeg'},
        '–ö–∞—Ä—Ç–æ–ø–ª—è –ø–æ-—Å–µ–ª—è–Ω—Å—å–∫–∏': {'price': 50, 'photo': 'photos/country_potatoes.jpg'}
    },
    '–°–∞–ª–∞—Ç–∏': {
        '–¶–µ–∑–∞—Ä': {'price': 80, 'photo': 'photos/salat_cezar.png'},
        '–û–ª—ñ–≤\'—î': {'price': 90, 'photo': 'photos/salat_olive.jpg'},
        '–°–∞–ª–∞—Ç –ê–π–∑–±–µ—Ä–≥': {'price': 75, 'photo': 'photos/salat_iceberg.jpg'},
        '–ì—Ä–µ—Ü—å–∫–∏–π': {'price': 85, 'photo': 'photos/greek_salad.jpg'},
        '–í—ñ–Ω—ñ–≥—Ä–µ—Ç': {'price': 70, 'photo': 'photos/vinigret.jpg'}
    },
    '–ù–∞–ø–æ—ó': {
        '–ö–æ–∫–∞-–ö–æ–ª–∞': {'price': 30, 'photo': 'photos/photo_koka_cola.jpg'},
        '–§–∞–Ω—Ç–∞': {'price': 30, 'photo': 'photos/photo_fanta.jpg'},
        '–°–æ–∫–∏': {'price': 40, 'photo': 'photos/photo_soki.jpg'},
        '–£–∑–≤–∞—Ä': {'price': 35, 'photo': 'photos/uzvar.jpg'},
        '–ö–≤–∞—Å': {'price': 30, 'photo': 'photos/kvas.jpg'}
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
cart = {}  # –ö–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}  # –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
reservations = {}  # –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–æ–ª–∏–∫—ñ–≤

ADMIN_CHAT_ID = '720924968'  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å


def main_menu(message):
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏"""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ['üçΩÔ∏è –ú–µ–Ω—é', 'üõí –ö–æ—à–∏–∫', '‚úèÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫', 'üç¥ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫']
    markup.add(*buttons)
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
def go_back(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == 'üçΩÔ∏è –ú–µ–Ω—é')
def show_menu(message):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = ['üç≤ –°—Ç—Ä–∞–≤–∏', 'ü•ó –°–∞–ª–∞—Ç–∏', 'ü•§ –ù–∞–ø–æ—ó', 'üîô –ù–∞–∑–∞–¥']
    markup.add(*buttons)
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ['üç≤ –°—Ç—Ä–∞–≤–∏', 'ü•ó –°–∞–ª–∞—Ç–∏', 'ü•§ –ù–∞–ø–æ—ó'])
def category_menu(message):
    """–ü–æ–∫–∞–∑—É—î —Ç–æ–≤–∞—Ä–∏ —É –≤–∏–±—Ä–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    category = message.text[2:]
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    items = menu[category]
    for item in items:
        markup.add(item)
    markup.add('üîô –ù–∞–∑–∞–¥')

    for item, details in items.items():
        try:
            with open(details['photo'], 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
        except FileNotFoundError:
            bot.send_message(message.chat.id, f"üñºÔ∏è –§–æ—Ç–æ –¥–ª—è {item} —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥—Å—É—Ç–Ω—î")

        bot.send_message(message.chat.id, f'{item} - {details["price"]} –≥—Ä–Ω')

    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:', reply_markup=markup)


# –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞–≤/—Å–∞–ª–∞—Ç—ñ–≤/–Ω–∞–ø–æ—ó–≤
@bot.message_handler(func=lambda message: message.text in menu['–°—Ç—Ä–∞–≤–∏'].keys())
def dish_menu(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Å—Ç—Ä–∞–≤–∏"""
    handle_product_selection(message)


@bot.message_handler(func=lambda message: message.text in menu['–°–∞–ª–∞—Ç–∏'].keys())
def salad_menu(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Å–∞–ª–∞—Ç—É"""
    handle_product_selection(message)


@bot.message_handler(func=lambda message: message.text in menu['–ù–∞–ø–æ—ó'].keys())
def drink_menu(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –Ω–∞–ø–æ—é"""
    handle_product_selection(message)


def handle_product_selection(message):
    """–°–ø—ñ–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É"""
    product = message.text
    user_id = message.chat.id
    user_data[user_id] = {'item': product}
    bot.send_message(user_id, 'üìù –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:')
    bot.register_next_step_handler(message, process_quantity)


def process_quantity(message):
    """–û–±—Ä–æ–±–ª—è—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É —Ç–∞ –¥–æ–¥–∞—î –¥–æ –∫–æ—à–∏–∫–∞"""
    user_id = message.chat.id
    if user_id not in user_data or 'item' not in user_data[user_id]:
        return

    item = user_data[user_id]['item']

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É
    for category in menu:
        if item in menu[category]:
            price = menu[category][item]['price']
            try:
                quantity = int(message.text)
                if quantity <= 0:
                    raise ValueError
            except ValueError:
                bot.send_message(user_id, '‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0')
                return

            # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞
            if user_id not in cart:
                cart[user_id] = {}
            if category not in cart[user_id]:
                cart[user_id][category] = {}

            cart[user_id][category][item] = {
                'price': price,
                'quantity': quantity,
                'total_price': price * quantity
            }

            bot.send_message(user_id, f'‚úÖ –î–æ–¥–∞–Ω–æ {quantity} —à—Ç. {item} –≤ –∫–æ—à–∏–∫!\nüí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {price * quantity} –≥—Ä–Ω.')
            show_menu(message)
            return

    bot.send_message(user_id, '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É')


@bot.message_handler(func=lambda message: message.text == 'üõí –ö–æ—à–∏–∫')
def view_cart(message):
    """–ü–æ–∫–∞–∑—É—î –≤–º—ñ—Å—Ç –∫–æ—à–∏–∫–∞"""
    user_id = message.chat.id
    if not cart.get(user_id):
        bot.send_message(user_id, 'üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.')
        return

    text = '<b>üõí –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n'
    total = 0

    for category, items in cart[user_id].items():
        text += f'\n<b>üìÇ {category}</b>\n'
        for item, info in items.items():
            text += f'  - {item}: {info["quantity"]} —à—Ç. √ó {info["price"]} –≥—Ä–Ω = {info["total_price"]} –≥—Ä–Ω\n'
            total += info['total_price']

    text += f'\n<b>üí≥ –ó–∞–≥–∞–ª–æ–º:</b> {total} –≥—Ä–Ω'

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '‚ùå –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫', 'üîô –ù–∞–∑–∞–¥')

    bot.send_message(user_id, text, parse_mode='HTML', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚ùå –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫')
def clear_cart(message):
    """–û—á–∏—â–∞—î –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.chat.id
    cart[user_id] = {}
    bot.send_message(user_id, 'üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!')
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
def place_order(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    user_id = message.chat.id
    if not cart.get(user_id):
        bot.send_message(user_id, 'üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.')
        return

    bot.send_message(user_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º\'—è:')
    bot.register_next_step_handler(message, process_name)


def process_name(message):
    """–û–±—Ä–æ–±–ª—è—î —ñ–º'—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    user_id = message.chat.id
    user_data[user_id] = {'name': message.text}
    bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:')
    bot.register_next_step_handler(message, process_address)


def process_address(message):
    """–û–±—Ä–æ–±–ª—è—î –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏"""
    user_id = message.chat.id
    user_data[user_id]['address'] = message.text
    bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
    bot.register_next_step_handler(message, process_phone)


def process_phone(message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    user_id = message.chat.id
    phone = message.text

    if not re.match(r'^\d{10,12}$', phone):
        bot.send_message(user_id, '‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å 10-12 —Ü–∏—Ñ—Ä')
        bot.register_next_step_handler(message, process_phone)
        return

    user_data[user_id]['phone'] = phone

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
    order_text = "<b>‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
    total = 0

    for category, items in cart[user_id].items():
        order_text += f"<b>üçΩÔ∏è {category}</b>\n"
        for item, details in items.items():
            order_text += f"  - {item}: {details['quantity']} √ó {details['price']} –≥—Ä–Ω = {details['total_price']} –≥—Ä–Ω\n"
            total += details['total_price']

    order_text += f"\n<b>üí∞ –°—É–º–∞:</b> {total} –≥—Ä–Ω\n"
    order_text += f"<b>üë§ –Ü–º'—è:</b> {user_data[user_id]['name']}\n"
    order_text += f"<b>üè† –ê–¥—Ä–µ—Å–∞:</b> {user_data[user_id]['address']}\n"
    order_text += f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone[:3]}***\n\n"
    order_text += "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞."

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.send_message(user_id, order_text, parse_mode='HTML')

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_text = "<b>üÜï –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
    for category, items in cart[user_id].items():
        admin_text += f"<b>üçΩÔ∏è {category}</b>\n"
        for item, details in items.items():
            admin_text += f"  - {item}: {details['quantity']} √ó {details['price']} –≥—Ä–Ω = {details['total_price']} –≥—Ä–Ω\n"

    admin_text += f"\n<b>üí∞ –°—É–º–∞:</b> {total} –≥—Ä–Ω\n"
    admin_text += f"<b>üë§ –Ü–º'—è:</b> {user_data[user_id]['name']}\n"
    admin_text += f"<b>üè† –ê–¥—Ä–µ—Å–∞:</b> {user_data[user_id]['address']}\n"
    admin_text += f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}"

    bot.send_message(ADMIN_CHAT_ID, admin_text, parse_mode='HTML')

    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
    cart.pop(user_id, None)
    user_data.pop(user_id, None)
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == '‚úèÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫')
def leave_feedback(message):
    """–ó–∞–ø–∏—Ç—É—î –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    bot.send_message(message.chat.id, 'üìù –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤—ñ—Å:')
    bot.register_next_step_handler(message, process_feedback)


def process_feedback(message):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–≥—É–∫ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    feedback = message.text
    bot.send_message(message.chat.id, '‚ù§Ô∏è –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!')
    bot.send_message(ADMIN_CHAT_ID,
                     f"üìù –í—ñ–¥–≥—É–∫ –≤—ñ–¥ @{message.from_user.username or message.from_user.first_name}:\n{feedback}")
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == 'üç¥ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫')
def book_table(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–æ–ª–∏–∫–∞"""
    bot.send_message(message.chat.id, 'üë• –ù–∞ —Å–∫—ñ–ª—å–∫–∏ –æ—Å—ñ–± –±—Ä–æ–Ω—é—î—Ç–µ —Å—Ç–æ–ª–∏–∫?')
    bot.register_next_step_handler(message, process_guests)


def process_guests(message):
    """–û–±—Ä–æ–±–ª—è—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π"""
    try:
        guests = int(message.text)
        if guests < 1 or guests > 20:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, '‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 20')
        bot.register_next_step_handler(message, process_guests)
        return

    user_id = message.chat.id
    user_data[user_id] = {'guests': guests}

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ (–Ω–∞—Å—Ç—É–ø–Ω—ñ 7 –¥–Ω—ñ–≤)
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    dates = [(datetime.now() + timedelta(days=i)).strftime('%d.%m.%Y') for i in range(7)]
    markup.add(*dates)
    markup.add('üîô –ù–∞–∑–∞–¥')

    bot.send_message(user_id, 'üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:', reply_markup=markup)
    bot.register_next_step_handler(message, process_date)


def process_date(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –¥–∞—Ç–∏"""
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        main_menu(message)
        return

    try:
        datetime.strptime(message.text, '%d.%m.%Y')
    except ValueError:
        bot.send_message(message.chat.id, '‚ùó –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑—ñ —Å–ø–∏—Å–∫—É')
        bot.register_next_step_handler(message, process_date)
        return

    user_id = message.chat.id
    user_data[user_id]['date'] = message.text

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ —á–∞—Å
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    times = ['10:00', '12:00', '14:00', '16:00', '18:00', '20:00', '22:00']
    markup.add(*times)
    markup.add('üîô –ù–∞–∑–∞–¥')

    bot.send_message(user_id, '‚è∞ –û–±–µ—Ä—ñ—Ç—å —á–∞—Å:', reply_markup=markup)
    bot.register_next_step_handler(message, process_time)


def process_time(message):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —á–∞—Å—É"""
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        main_menu(message)
        return

    if message.text not in ['10:00', '12:00', '14:00', '16:00', '18:00', '20:00', '22:00']:
        bot.send_message(message.chat.id, '‚ùó –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑—ñ —Å–ø–∏—Å–∫—É')
        bot.register_next_step_handler(message, process_time)
        return

    user_id = message.chat.id
    user_data[user_id]['time'] = message.text

    bot.send_message(user_id, 'üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:')
    bot.register_next_step_handler(message, process_booking_name)


def process_booking_name(message):
    """–û–±—Ä–æ–±–ª—è—î —ñ–º'—è –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"""
    user_id = message.chat.id
    user_data[user_id]['name'] = message.text
    bot.send_message(user_id, 'üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
    bot.register_next_step_handler(message, process_booking_phone)


def process_booking_phone(message):
    """–ó–∞–≤–µ—Ä—à—É—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"""
    phone = message.text
    if not re.match(r'^\d{10,12}$', phone):
        bot.send_message(message.chat.id, '‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (10-12 —Ü–∏—Ñ—Ä)')
        bot.register_next_step_handler(message, process_booking_phone)
        return

    user_id = message.chat.id
    user_data[user_id]['phone'] = phone

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
    reservation_info = (
        "<b>‚úÖ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
        f"<b>üë§ –Ü–º'—è:</b> {user_data[user_id]['name']}\n"
        f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone[:3]}***\n"
        f"<b>üë• –ì–æ—Å—Ç—ñ:</b> {user_data[user_id]['guests']}\n"
        f"<b>üìÖ –î–∞—Ç–∞:</b> {user_data[user_id]['date']}\n"
        f"<b>‚è∞ –ß–∞—Å:</b> {user_data[user_id]['time']}\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è! –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—Å!"
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.send_message(user_id, reservation_info, parse_mode='HTML')

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_info = (
        "<b>üÜï –ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è</b>\n\n"
        f"<b>üë§ –Ü–º'—è:</b> {user_data[user_id]['name']}\n"
        f"<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"<b>üë• –ì–æ—Å—Ç—ñ:</b> {user_data[user_id]['guests']}\n"
        f"<b>üìÖ –î–∞—Ç–∞:</b> {user_data[user_id]['date']}\n"
        f"<b>‚è∞ –ß–∞—Å:</b> {user_data[user_id]['time']}"
    )

    bot.send_message(ADMIN_CHAT_ID, admin_info, parse_mode='HTML')

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
    if user_id not in reservations:
        reservations[user_id] = []
    reservations[user_id].append(user_data[user_id].copy())

    # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
    user_data.pop(user_id, None)
    main_menu(message)


if __name__ == '__main__':
    # –í–∏–¥–∞–ª—è—î–º–æ –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (—è–∫—â–æ –≤—ñ–Ω –±—É–≤)
    telebot.apihelper.delete_webhook(bot.token)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    bot.polling(none_stop=True)
