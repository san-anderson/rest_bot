import telebot
from telebot import types
import re
from datetime import datetime, timedelta

bot = telebot.TeleBot('8187420980:AAFLfckBFdA8VsaeGVJQXhrLLvK7o_N1KeE')

menu = {
    '–°—Ç—Ä–∞–≤–∏': {
        '–í–∞—Ä–µ–Ω–∏–∫–∏': {
            'price': 50,
            'photo': 'photos/varenyk.jpg'
        },
        '–î–µ—Ä—É–Ω–∏': {
            'price': 70,
            'photo': 'photos/deruny.jpg'
        },
        '–ë–æ—Ä—â': {
            'price': 60,
            'photo': 'photos/borshch.jpg'
        },
        '–°–æ–ª—è–Ω–∫–∞': {
            'price': 65,
            'photo': 'photos/solyanka.jpg'
        },
        '–•–æ–ª–æ–¥–Ω–∏–∫': {
            'price': 55,
            'photo': 'photos/holodnik.jpg'
        },
        '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞': {
            'price': 120,
            'photo': 'photos/pizza_margarita.jpg'
        },
        '–ü—ñ—Ü–∞ 4 –°–∏—Ä–∏': {
            'price': 150,
            'photo': 'photos/pizza_4cheese.jpg'
        },
        '–ü—ñ—Ü–∞ –ü–∞–ø–µ—Ä–æ–Ω—ñ': {
            'price': 140,
            'photo': 'photos/pizza_pepperoni.jpg'
        },
        '–ö–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ': {
            'price': 45,
            'photo': 'photos/french_fries.jpeg'
        },
        '–ö–∞—Ä—Ç–æ–ø–ª—è –ø–æ-—Å–µ–ª—è–Ω—Å—å–∫–∏': {
            'price': 50,
            'photo': 'photos/country_potatoes.jpg'
        }
    },
    '–°–∞–ª–∞—Ç–∏': {
        '–¶–µ–∑–∞—Ä': {
            'price': 80,
            'photo': 'photos/salat_cezar.png'
        },
        '–û–ª—ñ–≤\'—î': {
            'price': 90,
            'photo': 'photos/salat_olive.jpg'
        },
        '–°–∞–ª–∞—Ç –ê–π–∑–±–µ—Ä–≥': {
            'price': 75,
            'photo': 'photos/salat_iceberg.jpg'
        },
        '–ì—Ä–µ—Ü—å–∫–∏–π': {
            'price': 85,
            'photo': 'photos/greek_salad.jpg'
        },
        '–í—ñ–Ω—ñ–≥—Ä–µ—Ç': {
            'price': 70,
            'photo': 'photos/vinigret.jpg'
        }
    },
    '–ù–∞–ø–æ—ó': {
        '–ö–æ–∫–∞-–ö–æ–ª–∞': {
            'price': 30,
            'photo': 'photos/photo_koka_cola.jpg'
        },
        '–§–∞–Ω—Ç–∞': {
            'price': 30,
            'photo': 'photos/photo_fanta.jpg'
        },
        '–°–æ–∫–∏': {
            'price': 40,
            'photo': 'photos/photo_soki.jpg'
        },
        '–£–∑–≤–∞—Ä': {
            'price': 35,
            'photo': 'photos/uzvar.jpg'
        },
        '–ö–≤–∞—Å': {
            'price': 30,
            'photo': 'photos/kvas.jpg'
        }
    }
}
# Modified cart logic with emojis
cart = {}
user_data = {}
reservations = {}

ADMIN_CHAT_ID = '720924968'


def main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('üçΩÔ∏è –ú–µ–Ω—é', 'üõí –ö–æ—à–∏–∫', '‚úèÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫', 'üç¥ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫')
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
def go_back(message):
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == 'üçΩÔ∏è –ú–µ–Ω—é')
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('üç≤ –°—Ç—Ä–∞–≤–∏', 'ü•ó –°–∞–ª–∞—Ç–∏', 'ü•§ –ù–∞–ø–æ—ó', 'üîô –ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ['üç≤ –°—Ç—Ä–∞–≤–∏', 'ü•ó –°–∞–ª–∞—Ç–∏', 'ü•§ –ù–∞–ø–æ—ó'])
def category_menu(message):
    category = message.text[2:]  # Remove emoji to match menu keys
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    items = menu[category]
    for item in items:
        markup.add(item)
    markup.add('üîô –ù–∞–∑–∞–¥')

    for item, details in items.items():
        price = details['price']
        photo_path = details['photo']
        with open(photo_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
            bot.send_message(message.chat.id, f'{item} - {price} –≥—Ä–Ω')

    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in menu['–°—Ç—Ä–∞–≤–∏'].keys())
def dish_menu(message):
    dish = message.text
    user_id = message.chat.id
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['item'] = dish
    bot.send_message(user_id, 'üìù –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:')
    bot.register_next_step_handler(message, process_quantity)


@bot.message_handler(func=lambda message: message.text in menu['–°–∞–ª–∞—Ç–∏'].keys())
def salad_menu(message):
    salad = message.text
    user_id = message.chat.id
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['item'] = salad
    bot.send_message(user_id, 'üìù –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:')
    bot.register_next_step_handler(message, process_quantity)


@bot.message_handler(func=lambda message: message.text in menu['–ù–∞–ø–æ—ó'].keys())
def drink_menu(message):
    drink = message.text
    user_id = message.chat.id
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['item'] = drink
    bot.send_message(user_id, 'üìù –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:')
    bot.register_next_step_handler(message, process_quantity)


def process_quantity(message):
    user_id = message.chat.id
    if user_id not in user_data or 'item' not in user_data[user_id]:
        return

    item = user_data[user_id]['item']

    if item in menu['–°—Ç—Ä–∞–≤–∏'].keys():
        category = '–°—Ç—Ä–∞–≤–∏'
    elif item in menu['–°–∞–ª–∞—Ç–∏'].keys():
        category = '–°–∞–ª–∞—Ç–∏'
    elif item in menu['–ù–∞–ø–æ—ó'].keys():
        category = '–ù–∞–ø–æ—ó'
    else:
        return

    dish = item
    price = menu[category][dish]['price']

    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        bot.send_message(user_id, '‚ùó –í–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ.')
        return

    total_price = price * quantity

    if user_id not in cart:
        cart[user_id] = {}
    if category not in cart[user_id]:
        cart[user_id][category] = {}

    cart[user_id][category][dish] = {
        'price': price,
        'quantity': quantity,
        'total_price': total_price
    }

    bot.send_message(user_id, f'‚úÖ –î–æ–¥–∞–Ω–æ {quantity} —à—Ç. {dish} –≤ –∫–æ—à–∏–∫.\nüí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {total_price} –≥—Ä–Ω.')
    bot.clear_step_handler_by_chat_id(user_id)
    show_menu(message)


@bot.message_handler(func=lambda message: message.text == 'üõí –ö–æ—à–∏–∫')
def view_cart(message):
    user_id = message.chat.id
    if user_id not in cart or not cart[user_id]:
        bot.send_message(user_id, 'üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.')
        return

    text = 'üõí *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n'
    total = 0
    for category, items in cart[user_id].items():
        text += f'\nüìÇ *{category}*\n'
        for item, info in items.items():
            text += f'  - _{item}_: {info["quantity"]} —à—Ç. √ó {info["price"]} –≥—Ä–Ω = {info["total_price"]} –≥—Ä–Ω\n'
            total += info['total_price']

    text += f'\nüí≥ *–ó–∞–≥–∞–ª–æ–º:* {total} –≥—Ä–Ω\n\n'

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', '‚ùå –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫', 'üîô –ù–∞–∑–∞–¥')

    bot.send_message(user_id, text, parse_mode='Markdown', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚ùå –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫')
def clear_cart(message):
    user_id = message.chat.id
    if user_id in cart:
        cart[user_id] = {}
    bot.send_message(user_id, 'üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.')
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
def place_order(message):
    user_id = message.chat.id
    if user_id not in cart or not cart[user_id]:
        bot.send_message(user_id, 'üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.')
        return

    bot.send_message(user_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º\'—è:')
    bot.register_next_step_handler(message, process_name)


def process_name(message):
    user_id = message.chat.id
    name = message.text
    user_data[user_id]['name'] = name

    bot.send_message(user_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:')
    bot.register_next_step_handler(message, process_address)


def process_address(message):
    user_id = message.chat.id
    address = message.text
    user_data[user_id]['address'] = address

    bot.send_message(user_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
    bot.register_next_step_handler(message, process_phone)


def process_phone(message):
    user_id = message.chat.id
    phone = message.text

    if not re.match(r'^\d{1,12}$', phone):
        bot.send_message(user_id, '‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, –Ω–µ –±—ñ–ª—å—à–µ 12 —Å–∏–º–≤–æ–ª—ñ–≤.')
        bot.send_message(user_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —â–µ —Ä–∞–∑:')
        bot.register_next_step_handler(message, process_phone)
        return

    user_data[user_id]['phone'] = phone

    order_details = '‚úÖ *–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n'
    total_price = 0

    for category, items in cart[user_id].items():
        order_details += f'\nüìÇ *{category}*\n'
        for item, details in items.items():
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–∏–º–≤–æ–ª–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –ø–æ—Ä—É—à–∏—Ç–∏ Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            safe_item = item.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
            order_details += f'  - {safe_item}: {details["quantity"]} —à—Ç. √ó {details["price"]} –≥—Ä–Ω = {details["total_price"]} –≥—Ä–Ω\n'
            total_price += details['total_price']

    order_details += f'\nüí≥ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {total_price} –≥—Ä–Ω\n\n'
    order_details += f'üë§ *–Ü–º\'—è:* {user_data[user_id]["name"]}\n'
    order_details += f'üè† *–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {user_data[user_id]["address"]}\n'
    order_details += f'üì± *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:* {user_data[user_id]["phone"][:3]}***'

    try:
        bot.send_message(user_id, order_details, parse_mode='Markdown')
    except Exception as e:
        # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ Markdown, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        bot.send_message(user_id, order_details.replace('*', '').replace('_', ''))

    bot.send_message(user_id, '–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º')

    admin_order_details = 'üÜï *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n'
    admin_order_details += f'üÜî *ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:* {user_id}\n'
    admin_order_details += order_details.replace(f'üì± *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:* {user_data[user_id]["phone"][:3]}***',
                                                 f'üì± *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:* {user_data[user_id]["phone"]}')

    try:
        bot.send_message(ADMIN_CHAT_ID, admin_order_details, parse_mode='Markdown')
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, admin_order_details.replace('*', '').replace('_', ''))

    if user_id in cart:
        cart[user_id] = {}
    if user_id in user_data:
        user_data.pop(user_id, None)
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == '‚úèÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫')
def leave_feedback(message):
    user_id = message.chat.id
    bot.send_message(user_id, '–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤—ñ—Å, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –≤–¥–æ—Å–∫–æ–Ω–∞–ª—é–≤–∞—Ç–∏—Å—å!')
    bot.register_next_step_handler(message, process_feedback)


def process_feedback(message):
    user_id = message.chat.id
    feedback = message.text
    bot.send_message(user_id, '–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! –í–∞—à–∞ –¥—É–º–∫–∞ –≤–∞–∂–ª–∏–≤–∞ –¥–ª—è –Ω–∞—Å!')
    bot.send_message(ADMIN_CHAT_ID, f'üìù –í—ñ–¥–≥—É–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}:\n{feedback}')
    main_menu(message)


@bot.message_handler(func=lambda message: message.text == 'üç¥ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫')
def book_table(message):
    user_id = message.chat.id
    bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±:')
    bot.register_next_step_handler(message, process_guests_number)


def process_guests_number(message):
    user_id = message.chat.id
    try:
        guests = int(message.text)
        if guests <= 0:
            raise ValueError
    except ValueError:
        bot.send_message(user_id, '‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–±—ñ–ª—å—à–µ 0)')
        bot.register_next_step_handler(message, process_guests_number)
        return

    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['guests'] = guests

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    today = datetime.now().date()
    dates = []
    for i in range(7):
        date = today + timedelta(days=i)
        dates.append(date.strftime('%d.%m.%Y'))
    markup.add(*dates)
    markup.add('üîô –ù–∞–∑–∞–¥')

    bot.send_message(user_id, '–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:', reply_markup=markup)
    bot.register_next_step_handler(message, process_booking_date)


def process_booking_date(message):
    user_id = message.chat.id
    date_str = message.text

    if date_str == 'üîô –ù–∞–∑–∞–¥':
        main_menu(message)
        return

    try:
        booking_date = datetime.strptime(date_str, '%d.%m.%Y').date()
    except ValueError:
        bot.send_message(user_id, '‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤')
        bot.register_next_step_handler(message, process_booking_date)
        return

    if booking_date < datetime.now().date():
        bot.send_message(user_id, '‚ùó –ù–µ –º–æ–∂–Ω–∞ –±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫ –Ω–∞ –º–∏–Ω—É–ª—ñ –¥–∞—Ç–∏')
        bot.register_next_step_handler(message, process_booking_date)
        return

    user_data[user_id]['booking_date'] = date_str

    markup = types.ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    times = ['10:00', '12:00', '14:00', '16:00', '18:00', '20:00', '22:00']
    markup.add(*times)
    markup.add('üîô –ù–∞–∑–∞–¥')

    bot.send_message(user_id, '–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:', reply_markup=markup)
    bot.register_next_step_handler(message, process_booking_time)


def process_booking_time(message):
    user_id = message.chat.id
    time_str = message.text

    if time_str == 'üîô –ù–∞–∑–∞–¥':
        main_menu(message)
        return

    if time_str not in ['10:00', '12:00', '14:00', '16:00', '18:00', '20:00', '22:00']:
        bot.send_message(user_id, '‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤')
        bot.register_next_step_handler(message, process_booking_time)
        return

    user_data[user_id]['booking_time'] = time_str
    bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:')
    bot.register_next_step_handler(message, process_booking_name)


def process_booking_name(message):
    user_id = message.chat.id
    name = message.text
    user_data[user_id]['booking_name'] = name
    bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:')
    bot.register_next_step_handler(message, process_booking_phone)


def process_booking_phone(message):
    user_id = message.chat.id
    phone = message.text

    if not re.match(r'^\d{1,12}$', phone):
        bot.send_message(user_id, '‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, –Ω–µ –±—ñ–ª—å—à–µ 12 —Å–∏–º–≤–æ–ª—ñ–≤.')
        bot.send_message(user_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —â–µ —Ä–∞–∑:')
        bot.register_next_step_handler(message, process_booking_phone)
        return

    user_data[user_id]['booking_phone'] = phone

    guests = user_data[user_id]['guests']
    date = user_data[user_id]['booking_date']
    time = user_data[user_id]['booking_time']
    name = user_data[user_id]['booking_name']

    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ Markdown
    safe_name = name.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    safe_date = date.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    safe_time = time.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')

    user_reservation_details = (
        f"‚úÖ *–í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:*\n"
        f"üë§ *–Ü–º'—è:* {safe_name}\n"
        f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone[:3]}***\n"
        f"üìÖ *–î–∞—Ç–∞:* {safe_date}\n"
        f"‚è∞ *–ß–∞—Å:* {safe_time}\n"
        f"üë• *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±:* {guests}"
    )

    try:
        bot.send_message(user_id, user_reservation_details, parse_mode='Markdown')
    except Exception as e:
        # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        plain_text = user_reservation_details.replace('*', '').replace('_', '')
        bot.send_message(user_id, plain_text)

    bot.send_message(user_id, '–í–∞—à —Å—Ç–æ–ª–∏–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ! –û—á—ñ–∫—É—î–º–æ –≤–∞—Å —É –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å.')

    admin_reservation_details = (
        f"üÜï *–ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–æ–ª–∏–∫–∞:*\n"
        f"üÜî *ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:* {user_id}\n"
        f"üë§ *–Ü–º'—è:* {safe_name}\n"
        f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        f"üìÖ *–î–∞—Ç–∞:* {safe_date}\n"
        f"‚è∞ *–ß–∞—Å:* {safe_time}\n"
        f"üë• *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—ñ–±:* {guests}"
    )

    try:
        bot.send_message(ADMIN_CHAT_ID, admin_reservation_details, parse_mode='Markdown')
    except Exception as e:
        plain_text = admin_reservation_details.replace('*', '').replace('_', '')
        bot.send_message(ADMIN_CHAT_ID, plain_text)

    if user_id not in reservations:
        reservations[user_id] = []
    reservations[user_id].append({
        'name': name,
        'phone': phone,
        'date': date,
        'time': time,
        'guests': guests
    })

    main_menu(message)


if __name__ == '__main__':
    bot.polling()